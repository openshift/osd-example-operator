apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: osde2e-gate
  namespace: argo
  labels:
    app: osde2e-gate
    version: v1.0.0
    purpose: quality-gate
spec:
  serviceAccountName: osde2e-workflow
  entrypoint: osde2e-gate-pipeline

  arguments:
    parameters:
    - name: test-harness-image
      value: "quay.io/rh_ee_yiqzhang/osd-example-operator-e2e:latest"
    - name: osde2e-image
      value: "quay.io/rh_ee_yiqzhang/osde2e:latest"
    - name: kubectl-image
      value: "quay.io/openshift/origin-cli:latest"
    - name: ocm-cluster-id
      value: "2kjhcu00tne378o2lkcb1pbqt7gqmf7p"
    - name: test-timeout
      value: "3600"

  templates:
  # Main pipeline: Skip deployment, run OSDE2E directly
  - name: osde2e-gate-pipeline
    steps:
    - - name: osde2e-quality-gate
        template: run-osde2e-test
    - - name: promote-and-notify
        template: promote-and-notify

  # OSDE2E test - This will deploy and test the operator image
  - name: run-osde2e-test
    container:
      image: "{{workflow.parameters.osde2e-image}}"
      command: ["/osde2e"]
      args:
      - test
      - --configs
      - "rosa,sts,int,ad-hoc-image"
      - --skip-must-gather
      - --skip-destroy-cluster
      - --cluster-id
      - "{{workflow.parameters.ocm-cluster-id}}"

      env:
      # OCM configuration (from Secret)
      - name: OCM_CLIENT_ID
        valueFrom:
          secretKeyRef:
            name: osde2e-credentials
            key: ocm-client-id
      - name: OCM_CLIENT_SECRET
        valueFrom:
          secretKeyRef:
            name: osde2e-credentials
            key: ocm-client-secret
      - name: OCM_CLUSTER_ID
        value: "{{workflow.parameters.ocm-cluster-id}}"
      - name: OCM_ENV
        value: "int"

      # AWS configuration (from Secret)
      - name: AWS_ACCESS_KEY_ID
        valueFrom:
          secretKeyRef:
            name: osde2e-credentials
            key: aws-access-key-id
      - name: AWS_SECRET_ACCESS_KEY
        valueFrom:
          secretKeyRef:
            name: osde2e-credentials
            key: aws-secret-access-key
      - name: AWS_ACCOUNT_ID
        valueFrom:
          secretKeyRef:
            name: osde2e-credentials
            key: aws-account-id
      - name: AWS_DEFAULT_REGION
        valueFrom:
          secretKeyRef:
            name: osde2e-credentials
            key: cloud-provider-region
      - name: CLOUD_PROVIDER_REGION
        value: "us-east-1"

      # ROSA configuration
      - name: ROSA_AWS_REGION
        value: "us-east-1"
      - name: ROSA_ENV
        value: "int"
      - name: ROSA_STS
        value: "true"

      # OSDE2E will deploy the test harness image itself
      - name: AD_HOC_TEST_IMAGES
        value: "{{workflow.parameters.test-harness-image}}"
      - name: SKIP_DESTROY_CLUSTER
        value: "true"
      - name: USE_EXISTING_CLUSTER
        value: "true"
      - name: CLUSTER_UP
        value: "false"
      - name: TEST_TIMEOUT
        value: "{{workflow.parameters.test-timeout}}"
      - name: SKIP_CLUSTER_HEALTH_CHECK
        value: "true"
      - name: SKIP_MUST_GATHER
        value: "true"

      resources:
        requests:
          cpu: 500m
          memory: 1Gi
        limits:
          cpu: 1000m
          memory: 2Gi

      securityContext:
        runAsNonRoot: true
        allowPrivilegeEscalation: false
        capabilities:
          drop: ["ALL"]

    # Node selection and tolerations for OpenShift
    nodeSelector:
      node-role.kubernetes.io/worker: ""
    tolerations:
    - key: node-role.kubernetes.io/infra
      operator: Exists
      effect: NoSchedule

  # Success notification
  - name: promote-and-notify
    container:
      image: "{{workflow.parameters.kubectl-image}}"
      command: ["/bin/sh", "-c"]
      args:
      - |
        set -e

        # Success message
        echo "üéâ Quality Gate SUCCESS - Ready for production!"
        echo "‚úÖ Image: {{workflow.parameters.test-harness-image}}"
        echo "üîó Cluster: {{workflow.parameters.ocm-cluster-id}}"

        TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
        DURATION="{{workflow.duration}}"

        curl -X POST -H 'Content-type: application/json' \
             --data '{
               "text": "‚úÖ OSDE2E Quality Gate PASSED!",
               "attachments": [{
                 "color": "good",
                 "fields": [
                   {"title": "Image", "value": "{{workflow.parameters.test-harness-image}}", "short": false},
                   {"title": "Cluster", "value": "{{workflow.parameters.ocm-cluster-id}}", "short": true},
                   {"title": "Environment", "value": "INT", "short": true},
                   {"title": "Duration", "value": "'$DURATION'", "short": true},
                   {"title": "Timestamp", "value": "'$TIMESTAMP'", "short": true},
                   {"title": "Workflow", "value": "{{workflow.name}}", "short": true},
                   {"title": "Status", "value": "Ready for Production üöÄ", "short": true}
                 ],
                 "footer": "OSDE2E Quality Gate",
                 "footer_icon": "https://github.com/openshift.png"
               }]
             }' \
             "${SLACK_WEBHOOK_URL}"

        if [ $? -eq 0 ]; then
          echo "‚úÖ Slack success notification sent"
        else
          echo "‚ö†Ô∏è Slack notification failed (exit code: $?)"
          echo "üìù Webhook URL: ${SLACK_WEBHOOK_URL}"
        fi

      env:
      - name: SLACK_WEBHOOK_URL
        valueFrom:
          secretKeyRef:
            name: osde2e-credentials
            key: slack-webhook-url

      resources:
        requests:
          cpu: 50m
          memory: 64Mi
        limits:
          cpu: 100m
          memory: 128Mi



  # Conditional failure notification
  - name: failure-notification
    container:
      image: "{{workflow.parameters.kubectl-image}}"
      command: ["/bin/sh", "-c"]
      args:
      - |
        set -e

        # Only notify on actual failure, not success
        if [ "{{workflow.status}}" != "Succeeded" ]; then
          echo "‚ùå Quality Gate FAILED!"
          echo "üí• Image: {{workflow.parameters.test-harness-image}}"
          echo "üîó Cluster: {{workflow.parameters.ocm-cluster-id}}"
          echo "üìä Status: {{workflow.status}}"
          echo "üîç Logs: argo logs {{workflow.name}} -n argo"

                  # Enhanced Slack failure notification
        TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
        DURATION="{{workflow.duration}}"

        curl -X POST -H 'Content-type: application/json' \
             --data '{
               "text": "‚ùå OSDE2E Quality Gate FAILED!",
               "attachments": [{
                 "color": "danger",
                 "fields": [
                   {"title": "Image", "value": "{{workflow.parameters.test-harness-image}}", "short": false},
                   {"title": "Cluster", "value": "{{workflow.parameters.ocm-cluster-id}}", "short": true},
                   {"title": "Environment", "value": "INT", "short": true},
                   {"title": "Status", "value": "{{workflow.status}}", "short": true},
                   {"title": "Duration", "value": "'$DURATION'", "short": true},
                   {"title": "Timestamp", "value": "'$TIMESTAMP'", "short": true},
                   {"title": "Workflow", "value": "{{workflow.name}}", "short": true},
                   {"title": "Logs", "value": "argo logs {{workflow.name}} -n argo", "short": false}
                 ],
                 "footer": "OSDE2E Quality Gate",
                 "footer_icon": "https://github.com/openshift.png"
               }]
             }' \
             "${SLACK_WEBHOOK_URL}"

        if [ $? -eq 0 ]; then
          echo "‚úÖ Slack failure notification sent"
        else
          echo "‚ö†Ô∏è Slack notification failed (exit code: $?)"
          echo "üìù Webhook URL: ${SLACK_WEBHOOK_URL}"
        fi
        else
          echo "‚ÑπÔ∏è Workflow succeeded, no failure notification needed"
        fi

      env:
      - name: SLACK_WEBHOOK_URL
        value: https://hooks.slack.com/services/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

      resources:
        requests:
          cpu: 50m
          memory: 64Mi
        limits:
          cpu: 100m
          memory: 128Mi

  # Global exit handler
  onExit: failure-notification
